>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

#test
>>> bg.integer_validator("name","John")
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

>>> bg.integer_validator("", 11)

>>> bg.integer_validator("hola", 11)

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0

>>> bg.integer_validator("distance", 4.3)
Traceback (most recent call last):
...
TypeError: distance must be an integer


>>> bg.integer_validator("distance", None)
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("distance", True)
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("string", "str")
Traceback (most recent call last):
...
TypeError: string must be an integer

>>> bg.integer_validator("distance", [1, 2, 3, 4])
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> bg.integer_validator("tuple", (1, 2))
Traceback (most recent call last):
...
TypeError: tuple must be an integer

>>> bg.integer_validator("dictionary", {2, 3})
Traceback (most recent call last):
...
TypeError: dictionary must be an integer


>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'





